Build kubernet cluster with three nodes with following configs

1. 198.18.90.22 :  Control plane nodes 
2. 198.18.90.23 :  Worker node 1
3. 198.18.90.24 :  Worker node 2

Kubernet version : 1.27

Steps to be followed. 
=====================

On control plane node execute following commands

1. Load all needed modules:
    cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf overlay br_netfilter EOF 
    modeprobe overlay; modeprobe  br_netfilter
2. Configure system for k8s networking 
    cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 net.bridge.bridge-nf-call-ip6tables = 1 EOF 
    sysctl --system    #load changes
3. Install containerd runtime # K8s discontinued Docker engine runtime support
    apt-get update && sudo apt-get install -y containerd 
4. Create configuration file for containerd
    mkdir -p /etc/containerd
5. Generate default containerd configuration and save to default path 
    containerd config default | sudo tee /etc/containerd/config.toml 
6. Restart containerd and check the status
    systemctl restart containerd
    systemctl status containerd 
8. Disable swap 
    swapoff -a
9. Install Dependencies packages 
    apt-get update && sudo apt-get install -y apt-transport-https curl
10. Install latest kubernetes
     curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
     cat <<EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF 
     apt-get update
     apt-get install -y kubelet kubeadm kubectl
11. Turn off automatic updates
      apt-mark hold kubelet kubeadm kubectl
12. Check installed version
       kubectl version
13. Before deployment if you would like to make sure available k8s verions
       apt-cache madison kubeadm | tac
14. Initialize kubeadm 
    1. Set env variables

        IPADDR="10.0.0.10"  # Private IP of the machine 
        NODENAME=$(hostname -s)
        POD_CIDR="192.168.0.0/16"
    2. Execute below command    
         kubeadm init --apiserver-advertise-address=$IPADDR  --apiserver-cert-extra-sans=$IPADDR  --pod-network-cidr=$POD_CIDR --node-name $NODENAME
    3. Verify 
          # Output will be like as below 
            ====================================================================
            Your Kubernetes control-plane has initialized successfully!

            To start using your cluster, you need to run the following as a regular user:

             mkdir -p $HOME/.kube
             sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
             sudo chown $(id -u):$(id -g) $HOME/.kube/config

            Alternatively, if you are the root user, you can run:

              export KUBECONFIG=/etc/kubernetes/admin.conf

            You should now deploy a pod network to the cluster.
              Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
              https://kubernetes.io/docs/concepts/cluster-administration/addons/

            Then you can join any number of worker nodes by running the following on each as root:

             kubeadm join 198.18.90.22:6443 --token ktokwj.1tgy2ps5dsw6nmlj \
	            --discovery-token-ca-cert-hash sha256:1c95033f499448e76ef17ef6d098d7b325d532c4e0f52035efdababe3eaae1b1     
            ==========================================================================
     4. Copy kubeadm join command from above Output.
     5. Install Network plugin calico
            kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
     6. Join worker nodes 
          execute kubeadm join command on worker nodes you have got from out of master Initialize.
          If you forgot execute below command on master to generate new token 
              kubeadm token create --print-join-command
     7. Verify 
            kubectl get pods         
    
    
                              





     
